// <auto-generated />
using System;
using DeToiServerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeToiServerData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240301082751_V1.2_UpdateUIElement")]
    partial class V12_UpdateUIElement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserPhone");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Phone");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.DeviceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.ShoppingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e"),
                            Description = "Bao gồm lau nhà, quét nhà, hút bụi, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Dọn dẹp"
                        },
                        new
                        {
                            Id = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f"),
                            Description = "Bao gồm đi chợ, siêu thị, nhà sách, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Mua sắm"
                        },
                        new
                        {
                            Id = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a"),
                            Description = "Bao gồm sửa máy lạnh, tủ lạnh, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Sửa chữa"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a9f22f1-3c67-49f7-bd84-ec290e4a37fd"),
                            Name = "Chờ xử lí"
                        },
                        new
                        {
                            Id = new Guid("47156bda-6077-4d2e-bc06-825e48c7f9ea"),
                            Name = "Đã tiếp nhận"
                        },
                        new
                        {
                            Id = new Guid("d3480359-9cb9-447f-b0d3-78f153f21d19"),
                            Name = "Đã hoàn thành"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603"),
                            BasePrice = 30000.0,
                            Description = "Dọn dẹp Phòng trọ",
                            Image = "https://detoivn.sirv.com/services/dondep/phongtro.png",
                            Name = "Phòng trọ",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("49a42267-d9dc-4e11-87a5-36525d4254d9"),
                            BasePrice = 55000.0,
                            Description = "Dọn dẹp Biệt thự",
                            Image = "https://detoivn.sirv.com/services/dondep/bietthu.png",
                            Name = "Biệt thự",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("ef2632f0-47bd-4bbe-a46f-628a28f03d8b"),
                            BasePrice = 50000.0,
                            Description = "Dọn dẹp Nhà / Nhà phố",
                            Image = "https://detoivn.sirv.com/services/dondep/n%C3%A2-nhapho.png",
                            Name = "Nhà / Nhà phố",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("dbb78597-043d-47c1-8810-93d392fd09ba"),
                            BasePrice = 40000.0,
                            Description = "Dọn dẹp Căn hộ chung cư",
                            Image = "https://detoivn.sirv.com/services/dondep/chungcu.jpg",
                            Name = "Căn hộ chung cư",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("d77cea99-d611-41c8-b959-4913c65edb53"),
                            BasePrice = 40000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi chợ hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("7aedca00-7d84-4528-98c9-8afde075d269"),
                            BasePrice = 50000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("faf7cbb1-0ad7-4fa7-9869-442ea2ba125c"),
                            BasePrice = 100000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị sang trọng",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("129554a2-2dfb-4b6c-9664-1c5653e07215"),
                            BasePrice = 60000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua quần áo",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("903bbd65-7822-45ac-8202-ee87279debce"),
                            BasePrice = 300000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua giày camping",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("89bec0c6-6cf0-4382-95ba-8727aa7a5dc3"),
                            BasePrice = 4000000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé concert",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("4df80075-0f53-46f3-8337-470e655abe18"),
                            BasePrice = 20000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé xem phim",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("19dce9ec-7ffa-4f7e-a417-b09290069f0c"),
                            BasePrice = 200000.0,
                            Description = "Sửa máy giặt",
                            Name = "Sửa máy giặt",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("fcac5651-2dab-469d-8c89-fdd953199014"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa máy lạnh",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("27d058d1-e0c4-4778-8631-741ce8f177c0"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa bàn ủi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("6e972095-8216-4f93-9e97-912be32b0a65"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa tivi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("468d1faf-e9a1-471a-86ff-5a35c37042f7"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa ống nước",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("f8372e31-72f4-427d-857a-f28401693c8e"),
                            BasePrice = 50000000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa bình gas",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("37e0d9ee-db46-46c5-86af-e63fe52836c7"),
                            BasePrice = 200000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa máy tính laptop",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoSelect")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementAdditionServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ab6c1954-ead6-4ab7-9184-7d07937da97a"),
                            AutoSelect = true,
                            Icon = "faDog",
                            Label = "Nhà có thú cưng",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("aab3c1d7-a8e0-4c3c-b090-445dc0f4a587"),
                            AutoSelect = false,
                            Icon = "faComputer",
                            Label = "Nhà có nhiều đồ điện tử",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("5aa24b79-0091-4e68-90e8-81e77d1725b7"),
                            AutoSelect = false,
                            Icon = "faBroom",
                            Label = "Nhân viên tự mang theo dụng cụ",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UIElementInputMethodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("49affbf6-08cb-4de7-a78c-b7ef741862ed"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "select"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InputMethodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodTypeId");

                    b.ToTable("UIElementInputOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6ed9cad-1754-41b5-92c9-cfe600800d15"),
                            Description = "Tất cả dịch vụ, dọn toàn bộ nhà / phòng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn trọn gói"
                        },
                        new
                        {
                            Id = new Guid("9bae1e0a-f3c5-4354-8946-01e41f3e976c"),
                            Description = "Trung bình 50.000đ / phòng, tiết kiệm và nhanh chóng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn theo phòng"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f63cf964-bba0-4c92-9d0a-706cdaf630c7"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Label = "Số nhà, số phòng, hẻm (ngõ)",
                            Placeholder = "Ví dụ: 257/43 Phòng 2014 Căn hộ Sunrise Continent",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("f79d7980-26db-4ba1-b87d-6b6700f49000"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Label = "Bạn muốn chúng tôi dọn như thế nào?",
                            LabelIcon = "faFlag",
                            Placeholder = "Giúp nhân viên biết thêm về công việc cần làm",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("e390b90d-8e55-4f1a-ae2d-6ea443470487"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Label = "Số lượng phòng",
                            LabelIcon = "faPersonShelter",
                            Placeholder = "Lưu ý: Nếu bạn chọn dịch vụ dọn theo phòng, vui lòng bổ sung số phòng cần dọn ở đây",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("UIElementServiceRequirementInputMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            DataType = "text",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        },
                        new
                        {
                            Id = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            DataType = "text",
                            MethodId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609")
                        },
                        new
                        {
                            Id = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            DataType = "number",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.ToTable("UIElementValidationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("81ad9402-004b-4106-8a4f-a3ec5ceab98d"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("adf2c237-9068-4f03-bb49-379180b1827a"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 2.",
                            Name = "min",
                            Value = "0"
                        },
                        new
                        {
                            Id = new Guid("204b86c4-a178-443d-b05a-c75cd532e53e"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 3.",
                            Name = "max",
                            Value = "255"
                        },
                        new
                        {
                            Id = new Guid("409e0b53-e8ba-42ae-a40c-dfb51e3c1803"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Message = "Thông báo valid input 2 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("36409e48-bf21-400c-a9e2-c0252bda9cdb"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("ecc1a51f-a913-4a39-9c7b-ca71617620be"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 2.",
                            Name = "min",
                            Value = "0"
                        },
                        new
                        {
                            Id = new Guid("0a201374-c3e7-4084-8ca0-32b93518d2af"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 3.",
                            Name = "max",
                            Value = "10"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.TermOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermOfServices");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.Property<Guid>("FreelancersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancersId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("FreelanceSkills", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("RoomNumber")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.ToTable("CleaningServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CleaningServiceId");
                        });

                    b.HasDiscriminator().HasValue("CleaningService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<Guid?>("DeviceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("DeviceInfoId");

                    b.ToTable("RepairingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("RepairingServiceId");
                        });

                    b.HasDiscriminator().HasValue("RepairingService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShoppingItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ShoppingInfoId");

                    b.ToTable("ShoppingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("ShoppingServiceId");
                        });

                    b.HasDiscriminator().HasValue("ShoppingService");
                });

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.HasOne("DeToiServer.Models.User", null)
                        .WithMany("Connections")
                        .HasForeignKey("UserPhone");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "CustomerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("Address")
                        .HasForeignKey("FreelanceAccountId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Promotion", "Promotion")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelance")
                        .WithMany("Orders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DeToiServerCore.Models.ServiceCategory", null)
                        .WithMany("Orders")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("DeToiServerCore.Models.Services.ServiceStatus", "ServiceStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Freelance");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceCategoryId");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("AdditionalRequirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "InputMethodType")
                        .WithMany("Options")
                        .HasForeignKey("InputMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethodType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("ServiceRequirements")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("Requirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "Method")
                        .WithMany("InputMethods")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("Validation")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.CleaningService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Infos.DeviceInfo", "DeviceInfo")
                        .WithMany()
                        .HasForeignKey("DeviceInfoId");

                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.RepairingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.ShoppingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Infos.ShoppingInfo", "ShoppingInfo")
                        .WithMany()
                        .HasForeignKey("ShoppingInfoId");

                    b.Navigation("ShoppingInfo");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPromotions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Navigation("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceTypes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Navigation("AdditionalRequirements");

                    b.Navigation("Requirements");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Navigation("InputMethods");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Navigation("ServiceRequirements");

                    b.Navigation("Validation");
                });
#pragma warning restore 612, 618
        }
    }
}
