// <auto-generated />
using System;
using DeToiServerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeToiServerData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240306145117_V1.6_UpdateFreelanceAccountAndOrderModel")]
    partial class V16_UpdateFreelanceAccountAndOrderModel
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserPhone");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Phone");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lon")
                        .HasColumnType("float");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<int>("LoveCount")
                        .HasColumnType("int");

                    b.Property<int>("OrderCount")
                        .HasColumnType("int");

                    b.Property<int>("PositiveReviewCount")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<double>("TotalReviewCount")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e"),
                            Description = "Bao gồm lau nhà, quét nhà, hút bụi, và nhiều dịch vụ khác",
                            Image = "https://detoivn.sirv.com/services/dondep/category.png",
                            Name = "Dọn dẹp"
                        },
                        new
                        {
                            Id = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f"),
                            Description = "Bao gồm đi chợ, siêu thị, nhà sách, và nhiều dịch vụ khác",
                            Image = "https://detoivn.sirv.com/services/dicho/category.png",
                            Name = "Mua sắm"
                        },
                        new
                        {
                            Id = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a"),
                            Description = "Bao gồm sửa máy lạnh, tủ lạnh, và nhiều dịch vụ khác",
                            Image = "https://detoivn.sirv.com/services/suachua/category.png",
                            Name = "Sửa chữa"
                        },
                        new
                        {
                            Id = new Guid("0f6f1894-3ee7-46a8-9939-842e3c620231"),
                            Description = "Bao gồm vệ sinh máy lạnh, tủ lạnh, ...",
                            Image = "https://detoivn.sirv.com/services/vesinhmaylanh/category.png",
                            Name = "Vệ sinh thiết bị"
                        },
                        new
                        {
                            Id = new Guid("1b1a6ebd-2838-4b3d-a1f1-1818305df2d6"),
                            Description = "Chuyển nhà phòng trọ",
                            Image = "https://detoivn.sirv.com/services/chuyennhaphongtro/category.png",
                            Name = "Chuyển nhà, phòng trọ"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceProven", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ServiceProven");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a9f22f1-3c67-49f7-bd84-ec290e4a37fd"),
                            Name = "Chờ xử lí"
                        },
                        new
                        {
                            Id = new Guid("1d0cc21a-9f11-4fda-bcbc-e91a2ab59c0d"),
                            Name = "Đã tiếp nhận"
                        },
                        new
                        {
                            Id = new Guid("a62dc11d-ba95-4a4c-aa4f-79f64550b57f"),
                            Name = "Đã hoàn thành"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603"),
                            BasePrice = 30000.0,
                            Description = "Dọn dẹp Phòng trọ",
                            Image = "https://detoivn.sirv.com/services/dondep/phongtro.png",
                            Name = "Phòng trọ",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("49a42267-d9dc-4e11-87a5-36525d4254d9"),
                            BasePrice = 55000.0,
                            Description = "Dọn dẹp Biệt thự",
                            Image = "https://detoivn.sirv.com/services/dondep/bietthu.png",
                            Name = "Biệt thự",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("ef2632f0-47bd-4bbe-a46f-628a28f03d8b"),
                            BasePrice = 50000.0,
                            Description = "Dọn dẹp Nhà / Nhà phố",
                            Image = "https://detoivn.sirv.com/services/dondep/n%C3%A2-nhapho.png",
                            Name = "Nhà / Nhà phố",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("dbb78597-043d-47c1-8810-93d392fd09ba"),
                            BasePrice = 40000.0,
                            Description = "Dọn dẹp Căn hộ chung cư",
                            Image = "https://detoivn.sirv.com/services/dondep/chungcu.jpg",
                            Name = "Căn hộ chung cư",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("d0f2f30e-9e87-43c2-8811-f1e4e9c95c7a"),
                            BasePrice = 40000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi chợ hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("6194477c-e5bd-414e-937d-e930084539a5"),
                            BasePrice = 50000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("0f63a1c1-6891-4c27-a03f-7d007f15c337"),
                            BasePrice = 100000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị sang trọng",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("3a8671ac-bb6d-45bf-9100-4d57a42a9712"),
                            BasePrice = 60000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua quần áo",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("529ba881-d3f8-4ad2-a9d1-780afdf94cf0"),
                            BasePrice = 300000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua giày camping",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("1d4750b0-c43f-4b23-bd69-8fa3006fce19"),
                            BasePrice = 4000000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé concert",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("158a5619-b9a5-4f7d-909f-8d7977df3157"),
                            BasePrice = 20000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé xem phim",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("2ee48a9c-2f75-43dd-843d-319600aa2925"),
                            BasePrice = 200000.0,
                            Description = "Sửa máy giặt",
                            Name = "Sửa máy giặt",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("011298f1-1a7c-4ade-81bf-eed40dd5241a"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa máy lạnh",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("efd893f7-79c9-4456-b01e-d6f4928e157a"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa bàn ủi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("0016015a-18cf-4440-9843-41715e38fbd3"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa tivi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("1bca3cde-76d2-4c21-b79f-7ef5122a7c00"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa ống nước",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("b323ee5f-aa25-4bf6-a8e7-7b367db83196"),
                            BasePrice = 50000000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa bình gas",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("c3b8b3c0-fce6-432d-8411-9cfb75165359"),
                            BasePrice = 200000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa máy tính laptop",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoSelect")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementAdditionServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e5630cdf-c2fb-4468-adcd-be75b0493cee"),
                            AutoSelect = true,
                            Icon = "faDog",
                            Key = "hasPets",
                            Label = "Nhà có thú cưng",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("b79e5600-78c3-478f-b94e-f846e3b472b3"),
                            AutoSelect = false,
                            Icon = "faComputer",
                            Key = "hasElectronics",
                            Label = "Nhà có nhiều đồ điện tử",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("d7c2e8e9-22ba-4d0e-bade-718c3fbcc3d9"),
                            AutoSelect = false,
                            Icon = "faBroom",
                            Key = "freelancerBringTools",
                            Label = "Nhân viên tự mang theo dụng cụ",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UIElementInputMethodTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("49affbf6-08cb-4de7-a78c-b7ef741862ed"),
                            Name = "input"
                        },
                        new
                        {
                            Id = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "select"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InputMethodTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodTypeId");

                    b.ToTable("UIElementInputOptions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d620c95b-c334-4696-9d80-47adbde38693"),
                            Description = "Tất cả dịch vụ, dọn toàn bộ nhà / phòng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn trọn gói"
                        },
                        new
                        {
                            Id = new Guid("feaf1a3e-d3b5-485f-8a85-f1b507d57c00"),
                            Description = "Trung bình 50.000đ / phòng, tiết kiệm và nhanh chóng",
                            InputMethodTypeId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609"),
                            Name = "Dọn theo phòng"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelIcon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Placeholder")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("UIElementServiceRequirements");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7a05eeb5-075d-4806-8401-3b5f22e88c43"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Key = "addressLine",
                            Label = "Số nhà, số phòng, hẻm (ngõ)",
                            Placeholder = "Ví dụ: 257/43 Phòng 2014 Căn hộ Sunrise Continent",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("9bdee193-e804-49ee-8061-8d8ba44e4e91"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Key = "cleanningType",
                            Label = "Bạn muốn chúng tôi dọn như thế nào?",
                            LabelIcon = "faFlag",
                            Placeholder = "Giúp nhân viên biết thêm về công việc cần làm",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        },
                        new
                        {
                            Id = new Guid("20bb011e-77dd-4330-8e8a-875947a9446b"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Key = "roomNumber",
                            Label = "Số lượng phòng",
                            LabelIcon = "faPersonShelter",
                            Placeholder = "Lưu ý: Nếu bạn chọn dịch vụ dọn theo phòng, vui lòng bổ sung số phòng cần dọn ở đây",
                            ServiceTypeId = new Guid("3b8a2d6a-b0e7-46af-a688-397cea642603")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MethodId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MethodId");

                    b.ToTable("UIElementServiceRequirementInputMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            DataType = "text",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        },
                        new
                        {
                            Id = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            DataType = "text",
                            MethodId = new Guid("89e6f2f5-15cc-470c-a363-427ee8646609")
                        },
                        new
                        {
                            Id = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            DataType = "number",
                            MethodId = new Guid("7bb50f83-c17c-48e2-a755-d51c397e06f4")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InputMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InputMethodId");

                    b.ToTable("UIElementValidationTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d05624ab-c41e-452f-b2a5-8ad25b9f3b32"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("fe8fb7ae-e828-47ea-9d9c-c7c18c96527d"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 2.",
                            Name = "min",
                            Value = "0"
                        },
                        new
                        {
                            Id = new Guid("b028e47a-4556-4391-adbf-932f859b058c"),
                            InputMethodId = new Guid("95b69f6f-c8a5-4b94-824b-214bb7435c4f"),
                            Message = "Thông báo valid input 1 custom 3.",
                            Name = "max",
                            Value = "255"
                        },
                        new
                        {
                            Id = new Guid("21d0fe6e-9655-45e5-a7d9-ff703b141f88"),
                            InputMethodId = new Guid("0ad2fdde-73c5-433c-99f8-95e9c9df32a4"),
                            Message = "Thông báo valid input 2 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("390a40e8-bff6-4a36-80d5-09ced1b82b42"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 1.",
                            Name = "required"
                        },
                        new
                        {
                            Id = new Guid("8ea607cc-6aa1-4961-a9b1-e3bc8f2f3616"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 2.",
                            Name = "min",
                            Value = "0"
                        },
                        new
                        {
                            Id = new Guid("69edc585-d2dc-49e5-869f-16b53077b901"),
                            InputMethodId = new Guid("42b3fce8-5392-4bfd-97a2-0b84532a4b67"),
                            Message = "Thông báo valid input 3 custom 3.",
                            Name = "max",
                            Value = "10"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.TermOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermOfServices");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.Property<Guid>("FreelancersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancersId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("FreelanceSkills", (string)null);
                });

            modelBuilder.Entity("OrderServiceType", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceTypesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrdersId", "ServiceTypesId");

                    b.HasIndex("ServiceTypesId");

                    b.ToTable("OrderServiceType", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CleanningType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("FreelancerBringTools")
                        .HasColumnType("bit");

                    b.Property<bool>("HasElectronics")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPets")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.ToTable("CleaningServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CleaningServiceId");
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RepairingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("RepairingServiceId");
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("ShoppingItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ShoppingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("ShoppingServiceId");
                        });
                });

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.HasOne("DeToiServer.Models.User", "User")
                        .WithMany("Connections")
                        .HasForeignKey("UserPhone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "CustomerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("Address")
                        .HasForeignKey("FreelanceAccountId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Promotion", "Promotion")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Address", "Address")
                        .WithMany("Orders")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelance")
                        .WithMany("Orders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DeToiServerCore.Models.Services.ServiceStatus", "ServiceStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");

                    b.Navigation("Freelance");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceProven", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelancer")
                        .WithMany("ServiceProven")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("ServiceProven")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("ServiceProven")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Order");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceCategoryId");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementAdditionServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("AdditionalRequirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputOption", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "InputMethodType")
                        .WithMany("Options")
                        .HasForeignKey("InputMethodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethodType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirement", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("ServiceRequirements")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", "ServiceType")
                        .WithMany("Requirements")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", "Method")
                        .WithMany("InputMethods")
                        .HasForeignKey("MethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Method");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementValidationType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", "InputMethod")
                        .WithMany("Validation")
                        .HasForeignKey("InputMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InputMethod");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OrderServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.ServiceType", null)
                        .WithMany()
                        .HasForeignKey("ServiceTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.CleaningService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.RepairingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.ShoppingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPromotions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");

                    b.Navigation("ServiceProven");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Navigation("OrderServices");

                    b.Navigation("ServiceProven");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Navigation("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Navigation("ServiceTypes");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Navigation("AdditionalRequirements");

                    b.Navigation("Requirements");

                    b.Navigation("ServiceProven");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementInputMethodType", b =>
                {
                    b.Navigation("InputMethods");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("DeToiServerCore.Models.SevicesUIElement.UIElementServiceRequirementInputMethod", b =>
                {
                    b.Navigation("ServiceRequirements");

                    b.Navigation("Validation");
                });
#pragma warning restore 612, 618
        }
    }
}
