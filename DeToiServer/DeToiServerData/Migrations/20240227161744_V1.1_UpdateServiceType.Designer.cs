// <auto-generated />
using System;
using DeToiServerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeToiServerData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240227161744_V1.1_UpdateServiceType")]
    partial class V11_UpdateServiceType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Connected")
                        .HasColumnType("bit");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ConnectionId");

                    b.HasIndex("UserPhone");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Phone");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.DeviceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.ShoppingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a7e166a-1011-4189-8c2b-50b907c0f580"),
                            Image = "image",
                            Name = "Đi chợ truyền thống"
                        },
                        new
                        {
                            Id = new Guid("e5493f23-c4f3-484b-99c0-05dc3a81ea7f"),
                            Image = "image",
                            Name = "Đi siêu thị"
                        },
                        new
                        {
                            Id = new Guid("09f1d165-c519-4648-a8a9-9515ab17076c"),
                            Image = "image",
                            Name = "Đi siêu thị sang trọng"
                        },
                        new
                        {
                            Id = new Guid("e90018d5-ca82-44a6-8805-86e3e80842c7"),
                            Image = "image",
                            Name = "Đi mua quần áo"
                        },
                        new
                        {
                            Id = new Guid("bce91a34-b766-4ec8-a90d-f565d4485b89"),
                            Image = "image",
                            Name = "Đi mua giày camping"
                        },
                        new
                        {
                            Id = new Guid("6bf12a04-053a-4899-bda3-b8f470001c23"),
                            Image = "image",
                            Name = "Đi mua vé xem phim"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e"),
                            Description = "Bao gồm lau nhà, quét nhà, hút bụi, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Dọn dẹp"
                        },
                        new
                        {
                            Id = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f"),
                            Description = "Bao gồm đi chợ, siêu thị, nhà sách, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Mua sắm"
                        },
                        new
                        {
                            Id = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a"),
                            Description = "Bao gồm sửa máy lạnh, tủ lạnh, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Sửa chữa"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdditionalNote")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a9f22f1-3c67-49f7-bd84-ec290e4a37fd"),
                            Name = "Chờ xử lí"
                        },
                        new
                        {
                            Id = new Guid("4676cc5a-d402-4239-97bc-69650d1ad84e"),
                            Name = "Đã tiếp nhận"
                        },
                        new
                        {
                            Id = new Guid("31ae4781-3b0f-4d1f-947c-5a4e38301c84"),
                            Name = "Đã hoàn thành"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c18d08b7-f578-4fc5-9c82-4f15e7a6c301"),
                            BasePrice = 30000.0,
                            Description = "Dọn dẹp Phòng trọ",
                            Image = "https://detoivn.sirv.com/services/dondep/phongtro.png",
                            Name = "Phòng trọ",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("017e2302-f69c-4e56-ae80-48b1143cb9d3"),
                            BasePrice = 55000.0,
                            Description = "Dọn dẹp Biệt thự",
                            Image = "https://detoivn.sirv.com/services/dondep/bietthu.png",
                            Name = "Biệt thự",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("7164452a-8848-4c4a-8a35-7ffc8b0c2aa1"),
                            BasePrice = 50000.0,
                            Description = "Dọn dẹp Nhà / Nhà phố",
                            Image = "https://detoivn.sirv.com/services/dondep/n%C3%A2-nhapho.png",
                            Name = "Nhà / Nhà phố",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("9267f1b4-ebc5-40cf-b745-4f624fd6f00f"),
                            BasePrice = 40000.0,
                            Description = "Dọn dẹp Căn hộ chung cư",
                            Image = "https://detoivn.sirv.com/services/dondep/chungcu.jpg",
                            Name = "Căn hộ chung cư",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("97d291e4-3817-490a-a75b-f79d013272ac"),
                            BasePrice = 40000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi chợ hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("f7783d57-5b1b-46a9-b40c-d3f35ee8307d"),
                            BasePrice = 50000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("a8fe689e-c10a-44b7-b9e2-b3ffa2d95836"),
                            BasePrice = 100000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị sang trọng",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("26780a58-f18a-4549-b2a1-39a1da8940f4"),
                            BasePrice = 60000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua quần áo",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("fce9d49c-c240-4a2c-a1cb-517bb66c76db"),
                            BasePrice = 300000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua giày camping",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("fce5008f-0d78-4bea-b3be-9cd17ddad3a4"),
                            BasePrice = 4000000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé concert",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("e4ba8f37-6455-415e-ac62-8c6f42576e44"),
                            BasePrice = 20000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé xem phim",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("cb9f48c1-69c3-4ddd-8af9-26553b026c28"),
                            BasePrice = 200000.0,
                            Description = "Sửa máy giặt",
                            Name = "Sửa máy giặt",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("fd1c1368-b365-43e9-a016-7f946f4ba66d"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa máy lạnh",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("948893e1-c7b0-4947-b60c-ebef235a5453"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa bàn ủi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("85d09f60-3472-48cb-89eb-22bed6cfed38"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa tivi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("f3292f56-4ecb-4b56-99c7-96a6681c0db1"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa ống nước",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("1b56cfc1-689d-4e39-b1fd-697b22f75e4c"),
                            BasePrice = 50000000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa bình gas",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("963b12f2-9046-4521-b723-4cc7be5b63f9"),
                            BasePrice = 200000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa máy tính laptop",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.TermOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermOfServices");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.Property<Guid>("FreelancersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancersId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("FreelanceSkills", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("RoomNumber")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.ToTable("CleaningServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CleaningServiceId");
                        });

                    b.HasDiscriminator().HasValue("CleaningService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<Guid?>("DeviceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("DeviceInfoId");

                    b.ToTable("RepairingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("RepairingServiceId");
                        });

                    b.HasDiscriminator().HasValue("RepairingService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShoppingItems")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ShoppingInfoId");

                    b.ToTable("ShoppingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("ShoppingServiceId");
                        });

                    b.HasDiscriminator().HasValue("ShoppingService");
                });

            modelBuilder.Entity("DeToiServer.Models.Connection", b =>
                {
                    b.HasOne("DeToiServer.Models.User", null)
                        .WithMany("Connections")
                        .HasForeignKey("UserPhone");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "CustomerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("Address")
                        .HasForeignKey("FreelanceAccountId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Promotion", "Promotion")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelance")
                        .WithMany("Orders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DeToiServerCore.Models.ServiceCategory", null)
                        .WithMany("Orders")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("DeToiServerCore.Models.Services.ServiceStatus", "ServiceStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Freelance");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceCategoryId");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.CleaningService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Infos.DeviceInfo", "DeviceInfo")
                        .WithMany()
                        .HasForeignKey("DeviceInfoId");

                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.RepairingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.ShoppingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Infos.ShoppingInfo", "ShoppingInfo")
                        .WithMany()
                        .HasForeignKey("ShoppingInfoId");

                    b.Navigation("ShoppingInfo");
                });

            modelBuilder.Entity("DeToiServer.Models.User", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPromotions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Navigation("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceTypes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
