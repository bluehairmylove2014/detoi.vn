// <auto-generated />
using System;
using DeToiServerData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeToiServerData.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240223102353_V1_GuidBasedIdAndModels")]
    partial class V1_GuidBasedIdAndModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LoginToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LoginTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CustomerAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FreelanceAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerAccountId");

                    b.HasIndex("FreelanceAccountId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberPoint")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Freelancers");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("DeToiServerCore.Models.BlogPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.Property<Guid>("PromotionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PromotionId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.FrequentlyAskedQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FrequentlyAskedQuestions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.DeviceInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.HomeInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HomeInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Infos.ShoppingInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShoppingInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("EstimatedPrice")
                        .HasColumnType("float");

                    b.Property<Guid?>("FreelancerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<DateTime>("ScheduleTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceStatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FreelancerId");

                    b.HasIndex("ServiceCategoryId");

                    b.HasIndex("ServiceStatusId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RequiredRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e"),
                            Description = "Bao gồm lau nhà, quét nhà, hút bụi, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Dọn dẹp"
                        },
                        new
                        {
                            Id = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f"),
                            Description = "Bao gồm đi chợ, siêu thị, nhà sách, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Mua sắm"
                        },
                        new
                        {
                            Id = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a"),
                            Description = "Bao gồm sửa máy lạnh, tủ lạnh, và nhiều dịch vụ khác",
                            Image = "image",
                            Name = "Sửa chữa"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrderId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderService", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceStatuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8a9f22f1-3c67-49f7-bd84-ec290e4a37fd"),
                            Name = "Chờ xử lí"
                        },
                        new
                        {
                            Id = new Guid("e2e05e3d-5e02-4ab5-bc95-98b0eef144c0"),
                            Name = "Đã tiếp nhận"
                        },
                        new
                        {
                            Id = new Guid("a3d5ee96-0795-4808-a273-41cc8bd5fc15"),
                            Name = "Đã hoàn thành"
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ServiceCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("58b16854-c02f-4a7b-813e-9e3dace89eb5"),
                            BasePrice = 50000.0,
                            Description = "Lau nhà sạch",
                            Name = "Lau nhà",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("86dc5f21-f072-4de1-be0d-dea60701ea2c"),
                            BasePrice = 55000.0,
                            Description = "Quét nhà sạch",
                            Name = "Quét nhà",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("57abdb99-a52d-4aaa-9fce-03271a8ad4a1"),
                            BasePrice = 40000.0,
                            Description = "Hút bụi sạch",
                            Name = "Hút bụi",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("9ba572f1-37cb-49ed-8550-1716fa8a247d"),
                            BasePrice = 30000.0,
                            Description = "Lau cửa kính sạch",
                            Name = "Lau cửa kính",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("6cc07cac-857d-49f0-922f-ea7e6fe3ab44"),
                            BasePrice = 100000.0,
                            Description = "Giặt thảm sạch",
                            Name = "Giặt thảm",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("b87f2add-b45a-4b08-bf97-57ecce74a710"),
                            BasePrice = 120000.0,
                            Description = "Giặt ga giường",
                            Name = "Giặt ga giường",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("51f31d45-5ad2-4d98-a396-d040ffef771e"),
                            BasePrice = 150000.0,
                            Description = "Vệ sinh máy lạnh",
                            Name = "Vệ sinh máy lạnh",
                            ServiceCategoryId = new Guid("d17ad87c-9f80-4f0e-bfd4-53138d900a6e")
                        },
                        new
                        {
                            Id = new Guid("23d4275f-a2e3-4781-83f6-84d4fa38230c"),
                            BasePrice = 40000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi chợ hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("69b161a0-7483-440f-a604-3d1a50cda454"),
                            BasePrice = 50000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị hộ",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("69f72467-a074-4719-a60d-709ef8371f50"),
                            BasePrice = 100000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi siêu thị sang trọng",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("ae0b09e5-8047-4bb6-9fdc-34f73e764f67"),
                            BasePrice = 60000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua quần áo",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("01d977ec-6155-4253-a3d1-f3876dce6d5c"),
                            BasePrice = 300000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua giày camping",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("7d5d2a82-6c95-427e-b7d6-17510be81eb5"),
                            BasePrice = 4000000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé concert",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("2c9de999-8ff3-4ed2-a0db-a925dba90783"),
                            BasePrice = 20000.0,
                            Description = "Mua sắm hộ siêu nhanh",
                            Name = "Đi mua vé xem phim",
                            ServiceCategoryId = new Guid("6f57d993-eb26-4b35-8c7d-7871a7fd624f")
                        },
                        new
                        {
                            Id = new Guid("4edf3f7c-5446-424e-b09b-949a1a0ba48c"),
                            BasePrice = 200000.0,
                            Description = "Sửa máy giặt",
                            Name = "Sửa máy giặt",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("9e1d5dd7-192b-42f3-8aa7-d6daeba64905"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa máy lạnh",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("bf4f8338-bd17-4115-a852-dc6e79f20088"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa bàn ủi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("ab19b473-8b0e-4d0f-b4ad-79dd81a853a0"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa tivi",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("c626e6a3-783d-479a-905a-268ad179c2c2"),
                            BasePrice = 200000.0,
                            Description = "Sửa chữa để tôi lo",
                            Name = "Sửa ống nước",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("5470be5c-735f-4a29-980d-8e0d087f0cd5"),
                            BasePrice = 50000000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa bình gas",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        },
                        new
                        {
                            Id = new Guid("643de3fe-cbf0-4dd0-a9cd-6ee64976f4c3"),
                            BasePrice = 200000.0,
                            Description = "Hãy yên tâm không nổ đâu",
                            Name = "Sửa máy tính laptop",
                            ServiceCategoryId = new Guid("8a21b21e-dc31-49c8-8b5b-84b69204dc3a")
                        });
                });

            modelBuilder.Entity("DeToiServerCore.Models.TermOfService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly>("PublishDate")
                        .HasColumnType("date");

                    b.Property<string>("Tilte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TermOfServices");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.Property<Guid>("FreelancersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FreelancersId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("FreelanceSkills", (string)null);
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<int>("Floor")
                        .HasColumnType("int");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<Guid?>("HomeInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasIndex("HomeInfoId");

                    b.ToTable("CleaningServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("CleaningServiceId");
                        });

                    b.HasDiscriminator().HasValue("CleaningService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<Guid?>("DeviceInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasIndex("DeviceInfoId");

                    b.ToTable("RepairingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("RepairingServiceId");
                        });

                    b.HasDiscriminator().HasValue("RepairingService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasBaseType("DeToiServerCore.Models.Services.Service");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShoppingInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ShoppingInfoId");

                    b.ToTable("ShoppingServices", null, t =>
                        {
                            t.Property("Id")
                                .HasColumnName("ShoppingServiceId");
                        });

                    b.HasDiscriminator().HasValue("ShoppingService");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.Address", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "CustomerAccount")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerAccountId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "FreelanceAccount")
                        .WithMany("Address")
                        .HasForeignKey("FreelanceAccountId");

                    b.Navigation("CustomerAccount");

                    b.Navigation("FreelanceAccount");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DeToiServerCore.Models.CustomerPromotion", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Promotion", "Promotion")
                        .WithMany("CustomerPromotions")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.CustomerAccount", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId");

                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", "Freelance")
                        .WithMany("Orders")
                        .HasForeignKey("FreelancerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DeToiServerCore.Models.ServiceCategory", null)
                        .WithMany("Orders")
                        .HasForeignKey("ServiceCategoryId");

                    b.HasOne("DeToiServerCore.Models.Services.ServiceStatus", "ServiceStatus")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Freelance");

                    b.Navigation("ServiceStatus");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.OrderService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Services.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("Services")
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceType", b =>
                {
                    b.HasOne("DeToiServerCore.Models.ServiceCategory", "ServiceCategory")
                        .WithMany("ServiceTypes")
                        .HasForeignKey("ServiceCategoryId");

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("FreelanceAccountSkill", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Accounts.FreelanceAccount", null)
                        .WithMany()
                        .HasForeignKey("FreelancersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Accounts.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.CleaningService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Infos.HomeInfo", "HomeInfo")
                        .WithMany()
                        .HasForeignKey("HomeInfoId");

                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.CleaningService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HomeInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.RepairingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Infos.DeviceInfo", "DeviceInfo")
                        .WithMany()
                        .HasForeignKey("DeviceInfoId");

                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.RepairingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ShoppingService", b =>
                {
                    b.HasOne("DeToiServerCore.Models.Services.Service", null)
                        .WithOne()
                        .HasForeignKey("DeToiServerCore.Models.Services.ShoppingService", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeToiServerCore.Models.Infos.ShoppingInfo", "ShoppingInfo")
                        .WithMany()
                        .HasForeignKey("ShoppingInfoId");

                    b.Navigation("ShoppingInfo");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.CustomerAccount", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CustomerPromotions");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Accounts.FreelanceAccount", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Order", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Promotion", b =>
                {
                    b.Navigation("CustomerPromotions");
                });

            modelBuilder.Entity("DeToiServerCore.Models.ServiceCategory", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceTypes");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DeToiServerCore.Models.Services.ServiceStatus", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
